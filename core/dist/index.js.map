{"version":3,"sources":["../src/utils/uuid.ts","../src/index.ts"],"sourcesContent":["const uuid = () => [...Array(4)].map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join('-')\n\nexport default uuid\n","import uuid from '@/utils/uuid'\n\ntype MaybePromise<T> = T | Promise<T>\n\nexport interface Message {\n  type: 'apply' | 'ping' | 'pong'\n  id: string\n  path: string[]\n  sender: 'provide' | 'inject'\n  callbackIds?: string[]\n  args: any[]\n  error?: string\n  data?: any\n}\n\nexport type OffMessage = () => MaybePromise<void>\n\nexport type OnMessage = (callback: (message: Message) => void) => MaybePromise<OffMessage | void>\n\nexport type SendMessage = (message: Message) => MaybePromise<void>\n\nexport interface Adapter {\n  onMessage: OnMessage\n  sendMessage: SendMessage\n}\n\nconst waitProvide = async (adapter: Adapter) => {\n  const offMessage = await new Promise<OffMessage | void>((resolve, reject) => {\n    const timer = setInterval(async () => {\n      try {\n        const id = uuid()\n        adapter.sendMessage({\n          type: 'ping',\n          id,\n          path: [],\n          sender: 'inject',\n          args: []\n        })\n        const offMessage = await adapter.onMessage((message) => {\n          if (message.sender !== 'provide') return\n          if (message.type !== 'pong') return\n          if (message.id !== id) return\n          clearInterval(timer)\n          offMessage?.()\n          resolve(offMessage)\n        })\n      } catch (error) {\n        clearInterval(timer)\n        reject(error)\n      }\n    })\n  })\n  offMessage?.()\n}\n\nconst createProvide = <T extends Record<string, any>>(target: T, adapter: Adapter) => {\n  adapter.onMessage(async (message) => {\n    if (message.sender !== 'inject') return\n\n    switch (message.type) {\n      case 'ping': {\n        adapter.sendMessage({\n          ...message,\n          type: 'pong',\n          sender: 'provide'\n        })\n        break\n      }\n      case 'apply': {\n        const mapArgs = message.args.map((arg) => {\n          if (message.callbackIds?.includes(arg)) {\n            return (...args: any[]) => {\n              adapter.sendMessage({\n                ...message,\n                id: arg,\n                data: args,\n                type: 'apply',\n                sender: 'provide'\n              })\n            }\n          } else {\n            return arg\n          }\n        })\n        try {\n          message.data = await (message.path.reduce((acc, key) => acc[key], target) as unknown as Function).apply(\n            target,\n            mapArgs\n          )\n        } catch (error) {\n          message.error = (error as Error).message\n        }\n        adapter.sendMessage({\n          ...message,\n          type: 'apply',\n          sender: 'provide'\n        })\n        break\n      }\n    }\n  })\n  return target\n}\n\nconst createInject = <T extends Record<string, any>>(source: T | null, adapter: Adapter) => {\n  const createProxy = (target: T, path: string[]) => {\n    const proxy = new Proxy<T>(target, {\n      get(target, key: string) {\n        return createProxy(source ? target[key] : ((() => {}) as unknown as T), [...path, key] as string[])\n      },\n      apply(_target, _thisArg, args) {\n        return new Promise<Message>(async (resolve, reject) => {\n          try {\n            await waitProvide(adapter)\n\n            const callbackIds: string[] = []\n            const mapArgs = args.map((arg) => {\n              if (typeof arg === 'function') {\n                const callbackId = uuid()\n                callbackIds.push(callbackId)\n                adapter.onMessage((_message) => {\n                  if (_message.sender !== 'provide') return\n                  if (_message.type !== 'apply') return\n                  if (_message.id !== callbackId) return\n                  arg(..._message.data)\n                })\n                return callbackId\n              } else {\n                return arg\n              }\n            })\n            const message: Message = {\n              type: 'apply',\n              id: uuid(),\n              path,\n              sender: 'inject',\n              callbackIds,\n              args: mapArgs\n            }\n\n            const offMessage = await adapter.onMessage((_message) => {\n              if (_message.sender !== 'provide') return\n              if (_message.type !== 'apply') return\n              if (_message.id !== message.id) return\n              offMessage?.()\n              _message.error ? reject(new Error(_message.error)) : resolve(_message.data)\n            })\n            adapter.sendMessage(message)\n          } catch (error) {\n            reject(error)\n          }\n        })\n      }\n    })\n    return proxy\n  }\n  return createProxy(source ?? ((() => {}) as unknown as T), [])\n}\n\nconst provideProxy = <T extends Record<string, any>>(context: () => T) => {\n  let target: T\n  return (adapter: Adapter) => (target ??= createProvide(context(), adapter))\n}\n\nconst injectProxy = <T extends Record<string, any>>(context: (() => T) | null) => {\n  let target: T\n  return (adapter: Adapter) => (target ??= createInject(context?.() ?? null, adapter))\n}\n\nconst defineProxy = <T extends Record<string, any>>(context: () => T, backup: boolean = false) => {\n  return [provideProxy(context), injectProxy(backup ? context : null)] as const\n}\n\nexport default defineProxy\n"],"mappings":"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","names":["offMessage","target"]}